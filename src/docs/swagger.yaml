openapi: 3.0.0
info:
  title: bdtime24.net API
  version: 1.0.0
  description: bdtime24.net is a leading news source in Bangladesh, dedicated to providing comprehensive and up-to-the-minute news coverage 24 hours a day. As a top-level news platform, bdtime24.net ensures that its readers are always informed about the latest developments across various domains, including politics, economy, culture, sports, and international affairs.
  termsOfService: https://bdtime24.net.github.io/
  contact:
    name: Zobaidul Kazi
    email: zobaidulkazi@gmail.com
    url: https://bdtime24.net/contacts
  license:
    name: Apache License, Version 2.0
    url: https://apache.com
servers:
- description: Development
  url: https://localhost:8000/api/v1
- description: Production
  url: https://bdtime24.net/api/v1/
tags:
- name: HealthChecks
  description: public Api Endpoints Health Checks
- name: Authentications
  description: public Api Endpoints And Authentication Purpose
- name: Dashboards
  description: public Api Endpoints Dashboards Purpose
- name: Articles
  description: public Api Endpoints Article Purpose
- name: Categories
  description: public Api Endpoints Category Purpose
- name: Comments
  description: Auth user created and update, delete this comment in this api..
- name: Tags
  description: News Tags Endpoints



paths:
  /health:
    get:
      description: Testing For Server Health
      tags:
      - HealthChecks
      responses:
        '200':
          description: it will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server is Up and Running

  /auth/signup:
    post:
      description: For Creating An Account For Authentication
      tags: [Authentications]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: zobaidulkazi
                email:
                  type: string
                  format: email
                  example: zobaidulkazi@gmail.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
              - username
              - email
              - password
      responses:
        '201':
          description: Successfully Created Account
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: user created Successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/signup
                      signin:
                        type: string
                        example: /auth/signin

        '400':
          $ref: '#/components/responses/400'

  /auth/signin:
    post:
      description: For Sign In With Email And Password || Phone Number and OTP
      tags: [Authentications]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: zobaidulkazi@gmail.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
              - email
              - password
      responses:
        '200':
          description: Logged in Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Logged in Successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/login

        '400':
          $ref: '#/components/responses/400'

  /auth/update: # update route
    post:
      description: For Update User Details
      tags: [Authentications]
      security:
      - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: zobaidulkazi
                role:
                  type: string
                  example: admin
              required:
              - name
              - role
      responses:
        '200':
          description: User Details Updated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User Details Updated Successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: iIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  links:

        '400':
          $ref: '#/components/responses/400'

  /auth/change-password: # # change-password
    post:
      description: For Change Password
      tags: [Authentications]
      security:
      - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: password123
                newPassword:
                  type: string
                  format: password
                  example: password123
              required:
              - oldPassword
              - newPassword

      responses:
        '200':
          description: Password Changed Successfully
        '400':
          $ref: '#/components/responses/400'

  /auth/forget-password:
    post:
      description: For Forget Password
      tags: [Authentications]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: zobaidulkazi@gmail.com
              required:
              - email
      responses:
        '200':
          description: Password Changed Successfully
        '400':
          $ref: '#/components/responses/400'


  /auth/logout:
    post:
      description: For Logout
      tags: [Authentications]
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Logged out Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    example: Logged out Successfully
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /auth/logout
                      signin:
                        type: string
                        example: /auth/signin

        '400':
          $ref: '#/components/responses/400'


#$# Dashboard: Start::::

  /dashboards:
    get:
      description: Authenticated User Can Get Dashboards Access Only
      tags: [Dashboards]
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Dashboards Fetched Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Dashboards Fetched Successfully
                  data:
                    type: object
                    properties:
                      dashboards:
                        type: array
                        items:
                          $ref: '#/components/schemas/Dashboard'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /dashboards

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /dashboards/analytics:
    get:
      description: Authenticated User Can Get Analytics Access Only
      tags: [Dashboards]
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Analytics Fetched Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Analytics Fetched Successfully
                  data:
                    type: object
                    properties:
                      analytics:
                        type: array
                        items:
                          $ref: '#/components/schemas/Dashboard'



## Articles ##

  /article:
    get:
      description: Get All Articles
      tags:
        - Articles
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
            example: 1
          description: Page number for pagination
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            example: 10
          description: Number of articles per page
        - in: query
          name: syncMode
          required: true
          schema:
            type: boolean
            example: true
          description: Whether to sync the articles in real-time
      responses:
        '200':
          description: Articles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  totalCount:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
                  nextLink:
                    type: string
                    nullable: true
                    example: null
                  prevLink:
                    type: string
                    nullable: true
                    example: null
                  message:
                    type: string
                    example: "Articles retrieved successfully"
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error


  /article/create:
    post:
      description: Created a new Article at this auth user..
      tags: [Articles]
      responses:
        '201':
            description: Articles Created Successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    statusCode:
                      type: integer
                      format: int32
                      example: 201
                    message:
                      type: string
                      example: Successfully Created a new Article
                    data:
                      type: object
                      properties:
                        Articles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Article'
        '404':
          description: Not Found'
        '500':
          description: Internal Server Error


# article/:

  /article/{slug}:
    get:
      description: Get an Article by Slug
      tags:
        - Articles
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: The slug of the article
      responses:
        '200':
          description: Article retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: "Successfully get the Article"
                  data:
                    type: object
                    properties:
                      article:
                        $ref: '#/components/schemas/Article'
        '400':
          description: Bad Request
        '404':
          description: Article not found
        '500':
          description: Internal Server Error



  /article/update:
    put:
      description: Update Article at this auth user ID..
      tags: [Articles]
      responses:
        '200':
            description: Articles Update Successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    statusCode:
                      type: integer
                      format: int32
                      example: 200
                    message:
                      type: string
                      example: Successfully Update a new Article
                    data:
                      type: object
                      properties:
                        Articles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Article'


  /article/delete:
    delete:
      description: Delete  Article at this auth user ID....
      tags: [Articles]
      responses:
        '200':
            description: Articles Delete Successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    statusCode:
                      type: integer
                      format: int32
                      example: 200
                    message:
                      type: string
                      example: Successfully Delete Article
  

  /article/{slug}/comment:
    post:
      description: Create a new Comment on an Article
      tags:
        - Comments
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: The slug of the article
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "আমি এই খবরটি পড়ে খুব আনন্দিত হয়েছি"
              required:
              - comment
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Comment created successfully
                  data:
                    type: object
                    properties:
                      comment:
                        $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '404':
          description: Article not found
        '500':
          description: Internal Server Error
        
  /article/{slug}/comment/{id}:
    put:
      description: Update a Comment on an Article
      tags:
        - Comments
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: The slug of the article
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The id of the comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "আমি এই খবরটি পড়ে খুব আনন্দিত হয়েছি"
              required:
              - comment
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Comment updated successfully
                  data:
                    type: object
                    properties:
                      comment:
                        $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '404':
          description: Comment not found
        '500':
          description: Internal Server Error

  /Categories:
    get:
      description: Get All Categories
      tags:
        - Categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: "Categories retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /Categories/create:
    post:
      description: Create a new Category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "আন্তর্জাতিক"
                description:
                  type: string
                  example: "আন্তর্জাতিক বিষয়ক খবর"
              required:
              - name
              - description
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Category created successfully
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /categories/{id}: # get category by id
    get:
      description: Get a Category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The id of the category
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: "Category retrieved successfully"
                  data:
                    type: object
                    properties:
                      category:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
        '404':
          description: Category not found
        '500':
          description: Internal Server Error

  /tag:
    get:
      description: Get All Tags
      tags:
        - Tags
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: "Tags retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /tag/create:
    post:
      description: Create a new Tag
      tags:
        - Tags
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "আন্তর্জাতিক"
                description:
                  type: string
                  example: "আন্তর্জাতিক বিষয়ক খবর"
              required:
              - name
              - description
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Tag created successfully
                  data:
                    type: object
                    properties:
                      tag:
                        $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error  

components:
  schemas:
    Signup:
      type: object
      properties:
        name:
          type: string
          example: zobaidulkazi
        email:
          type: string
          format: email
          example: zobaidulkazi@gmail.com
        password:
          type: string
          format: password
          example: password123

    Signin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: zobaidulkazi@gmail.com
        password:
          type: string
          format: password
          example: password123

    Dashboard:
      type: object
      properties:
        name:
          type: string
          example: zobaidulkazi
        email:
          type: string
          format: email
          example: zobaidulkazi@gmail.com
        avatar_url:
          type: string
          example: https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50

    Article:
      type: object
      properties:
        id:
          type: string
          example: "cm6g6si5w000iecujc1fa5vqb"
        headline:
          type: string
          example: "যাত্রীদের জিম্মি করে কর্মসূচি দুঃখজনক : রেলপথ উপদেষ্টা"
        slug:
          type: string
          example: "যাত্রীদের জিম্মি করে কর্মসূচি দুঃখজনক : রেলপথ উপদেষ্টা"
        keywords:
          type: array
          items:
            type: string
          example:
            - "রেলপথ মন্ত্রণালয়"
            - "কমলাপুর রেলওয়ে স্টেশন"
        sourceName:
          type: string
          example: "আন্তর্জাতিক"
        url:
          type: string
          example: "https://cdn.dhakapost.com/media/imgAll/BG/2025January/fawzul-katrim-20250128113953.jpg"
        urlToImage:
          type: array
          items:
            type: string
          example:
            - "https://cdn.dhakapost.com/media/imgAll/BG/2024October/israel-20241025154728.jpg"
            - "https://cdn.dhakapost.com/media/imgAll/BG/2024October/gaza-2-20241025075508.jpg"
            - "https://cdn.dhakapost.com/media/imgAll/BG/2024October/putin-brics-20241024154212.jpg"
        description:
          type: string
          example: "যাত্রীদের জিম্মি করে বাংলাদেশ রেলওয়ের রানিং স্টাফদের কর্মসূচি দুঃখজনক..."
        categoryId:
          type: string
          example: "cm6g6rxbj000fecujtca22jvk"
        userId:
          type: string
          example: "cm6g6qp6t000eecujuu3avt9s"
        tagId:
          type: string
          example: "cm6g6sbgj000gecuj2s1qt0ne"
        publishedAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"

    Category:
      type: object
      properties:
        id:
          type: string
          example: "cm6g6rxbj000fecujtca22jvk"
        name:
          type: string
          example: "আন্তর্জাতিক"
        description:
          type: string
          example: "আন্তর্জাতিক বিষয়ক খবর"
        userId:
          type: string
          example: "cm6g6qp6t000eecujuu3avt9s"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"

    Comment:
      type: object
      properties:
        id:
          type: string
          example: "cm6g6rxbj000fecujtca22jvk"
        articleId:
          type: string
          example: "cm6g6rxbj000fecujtca22jvk"
        userId:
          type: string
          example: "cm6g6qp6t000eecujuu3avt9s"
        comment:
          type: string
          example: "আমি এই খবরটি পড়ে খুব আনন্দিত হয়েছি"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"

    Tag:
      type: object
      properties:
        id:
          type: string
          example: "cm6g6rxbj000fecujtca22jvk"
        name:
          type: string
          example: "আন্তর্জাতিক"
        description:
          type: string
          example: "আন্তর্জাতিক বিষয়ক খবর"
        userId:
          type: string
          example: "cm6g6qp6t000eecujuu3avt9s"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-28T07:59:30.548Z"
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email address

    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Authentication token is missing or invalid

    "404":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: The requested resource was not found
